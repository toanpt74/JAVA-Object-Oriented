/*
    Chương trình minh họa exception trong java
    + Khai báo một mảng a có 5 phần tử
    + Vòng lặp duyệt từ a[0] đến a[9] và in ra giá trị của a[i] => Xuất hiện ngoại lệ do vượt quá chỉ số mảng
    => thông báo lỗi: Index 5 out of bounds for length 5
    + Sử dụng khối try ... catch để xử lý các ngoại lệ

    Có hai loại ngoại lệ trong java là Checked exception và Runtime Exception
    1. Checked Exception: là ngoại lệ kiểm tra bởi trình biên dịch (compiler). Nếu mã có xảy ra ngoại lệ thì phải xử lý qua cơ chế try..catch (ví dụ: IOException)
    + Các ngoại lệ này thường dự đoán trước và có liên quan đến các tính huống như nhập/xuất, truy xuất CSDL, tệp tin,...
    2. Runtime exception: Đây là ngoại lệ chỉ xảy ra khi chương trình đang chạy. Trình biên dịch không bắt buộc phải xử lý hoặc khai báo chúng
    ví dụ: NullPointerException, ArrayIndexOutOfBoundsException,....
    + Thường do lỗi logic của lập trình viên, ví dụ như truy cập phần tử không tồn tại trong mảng.
    

*/


public class Main{
	public static void main(String[] args){	
        int[] a ={1,2,3,4,5};
        int n=10;
        try{
            for(int i=0; i<n; i++)
                System.out.println("a[" + i + "]=" + a[i]);
        } catch(Exception e){
            System.out.println(e);
        }
        
    }
}   
------------------------------
Vi du: Checked Exception
/*
    Chương trình minh họa exception trong java
    + Khai báo một mảng a có 5 phần tử
    + Vòng lặp duyệt từ a[0] đến a[9] và in ra giá trị của a[i] => Xuất hiện ngoại lệ do vượt quá chỉ số mảng
    => thông báo lỗi: Index 5 out of bounds for length 5
    + Sử dụng khối try ... catch để xử lý các ngoại lệ

    Có hai loại ngoại lệ trong java là Checked exception và Runtime Exception
    1. Checked Exception: là ngoại lệ kiểm tra bởi trình biên dịch (compiler). Nếu mã có xảy ra ngoại lệ thì phải xử lý qua cơ chế try..catch (ví dụ: IOException)
    + Các ngoại lệ này thường dự đoán trước và có liên quan đến các tính huống như nhập/xuất, truy xuất CSDL, tệp tin,...
    2. Runtime exception: Đây là ngoại lệ chỉ xảy ra khi chương trình đang chạy. Trình biên dịch không bắt buộc phải xử lý hoặc khai báo chúng
    ví dụ: NullPointerException, ArrayIndexOutOfBoundsException,....
    + Thường do lỗi logic của lập trình viên, ví dụ như truy cập phần tử không tồn tại trong mảng.


*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class Main{
	public static void main(String[] args){	
         try{
             BufferedReader reader = new BufferedReader(new FileReader("example.txt"));
             String line = reader.readLine();
             System.out.println(line);
             reader.close();
         }
         catch(IOException e){
             System.out.println("Da xay ra loi khi doc file, " + e.getMessage());
         }
        
    }
}   
----------------------------------------------
Vi du: Runtime Exception
/*
    Chương trình minh họa exception trong java
    + Khai báo một mảng a có 5 phần tử
    + Vòng lặp duyệt từ a[0] đến a[9] và in ra giá trị của a[i] => Xuất hiện ngoại lệ do vượt quá chỉ số mảng
    => thông báo lỗi: Index 5 out of bounds for length 5
    + Sử dụng khối try ... catch để xử lý các ngoại lệ

    Có hai loại ngoại lệ trong java là Checked exception và Runtime Exception
    1. Checked Exception: là ngoại lệ kiểm tra bởi trình biên dịch (compiler). Nếu mã có xảy ra ngoại lệ thì phải xử lý qua cơ chế try..catch (ví dụ: IOException)
    + Các ngoại lệ này thường dự đoán trước và có liên quan đến các tính huống như nhập/xuất, truy xuất CSDL, tệp tin,...
    2. Runtime exception: Đây là ngoại lệ chỉ xảy ra khi chương trình đang chạy. Trình biên dịch không bắt buộc phải xử lý hoặc khai báo chúng
    ví dụ: NullPointerException, ArrayIndexOutOfBoundsException,....
    + Thường do lỗi logic của lập trình viên, ví dụ như truy cập phần tử không tồn tại trong mảng.


*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class Main{
	public static void main(String[] args){	
         int a = 10;
         int b=0;
         try{
             int c = a/b;
             System.out.println("Ket qua la: " + c);
         }catch(ArithmeticException e)
         {
             System.out.println("Da xay ra loi: " + e.getMessage());
         }
        
    }
}   
===============================================
Vi du ve throw exception
/*
   throw exception là một có chế xử lý ngoại lệ trong java, khi lập trình nếu cần xử lý một tình huống đặc biệt nào đó, chúng ta sẽ sử dụng từ khóa throw để "ném" ra một ngoại lệ

*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
public class Main{
	
    public static void checkAge(int age){
        if(age < 18){
            throw new IllegalArgumentException("Ban chua du tuoi de su dung dich vu nay.");
        }
        System.out.println("OK, xin moi ban trai nghiem dich vu.");
    }

    public static void main(String[] args){	
         int age;
         Scanner sc = new Scanner(System.in);
         System.out.print("Nhap tuoi: ");
         age = Integer.parseInt(sc.nextLine());
         try{
             checkAge(age);
         }catch(IllegalArgumentException e){
             System.out.println("Da xay ra loi: " + e.getMessage());
         }

        
    }
} 
==============================================
Vi du ve: Excaption Propagation trong java
/*
   Exception Propagation là quá trình lan truyền ngoại lệ trong java, khi một phương thức A gọi một phương thức B, nếu phương thức B không xử lý ngoại lệ,
   không dùng try...catch, thì ngoại lệ đó sẽ được chuyển lên phương thức gọi nó (phương thức A) và quá trình lan truyền sẽ tiếp tục như vậy cho đến khi ngoại lệ được xử lý
   hoặc đến hàm main()

*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
class InsufficientFundsException extends Exception{
    public InsufficientFundsException(String message){
        super(message);
    }
}

class BankAccount{
    private String account;
    private double balance;
    public BankAccount(){}
    public BankAccount(String account, double balance){
        this.account = account;
        this.balance = balance;
    }
    public void deposit(double amount){
        if(amount <=0){
            throw new IllegalArgumentException("So tien gui vao tai khoan phai lon hon 0");
        }
        balance+=amount;
        System.out.println("Ban da chuyen thanh cong " + amount + " vao tai khoan, so du la: " + balance);
    }
    public void withDraw(double amount) throws InsufficientFundsException{
        if(amount <=0){
            throw new IllegalArgumentException("So tien rut phai lon hon 0");
        }
        if(amount > balance){
            throw new InsufficientFundsException("So du khong du de thuc hien giao dich nay");
        }
        balance-=amount;
        System.out.println("Ban da rut thanh cong so tien: " + amount + ", so du tai khoan: " + balance);
    }
    public void show(){
        System.out.println("Bank account: " + account + ", Balance: " + balance);
    }
    public String getAccount(){
        return account;
    }
}

public class Main{	     
    public static void main(String[] args){	
        int chon;
        ArrayList<BankAccount> bankAccounts = new ArrayList<BankAccount>();
        Scanner sc= new Scanner(System.in);
        String account="";
        double amount=0;
        boolean check = true;
        while(true){
            System.out.println("CHUONG TRINH QUAN LY TAI KHOAN NGAN HANG");
            System.out.println("1-Them tai khoan");
            System.out.println("2-Xoa tai khoan");
            System.out.println("3-Sua tai khoan");
            System.out.println("4-Xem thong tin tai khoan");
            System.out.println("5-Nap tien vao tai khoan");
            System.out.println("6-Rut tien trong tai khoan");
            System.out.println("0-Thoat");
            System.out.print("Chon chuc nang (1-6), bam phim 0 de thoat chuong trinh:");
            chon = Integer.parseInt(sc.nextLine()); 
            if(chon ==0) break;
            switch(chon){
                case 1:
                    check = true;
                    System.out.println("NHAP CAC THONG TIN TAI KHOAN");
                    System.out.print("Nhap so tai khoan: ");
                    account = sc.nextLine();
                    while(check){
                        try{
                            System.out.print("Nhap so tien: ");
                            amount = Double.parseDouble(sc.nextLine());
                            check = false;

                        }catch(Exception e){
                            System.out.println("Loi nhap du lieu, " + e.getMessage());                            
                        }
                    }
                    BankAccount newAccount = new BankAccount(account, amount);
                    bankAccounts.add(newAccount);
                    break;
                case 4:
                    System.out.println("DANH SACH TAI KHOAN TRONG NGAN HANG");
                    for(int i=0; i<bankAccounts.size();i++)
                    {
                        BankAccount acc = bankAccounts.get(i);
                        acc.show();
                    }
                    sc.nextLine();
                    break;
                case 5:
                    check = true;
                    System.out.println("NAP TIEN VAO TAI KHOAN");
                    System.out.print("Nhap so tai khoan: ");
                    account = sc.nextLine();
                    BankAccount acc = null;
                    for(int i=0; i<bankAccounts.size(); i++){
                        if(account.equals(bankAccounts.get(i).getAccount())){
                            acc = bankAccounts.get(i);
                        }                           
                    }
                    if(acc == null) return;

                    while(check){
                        try{
                            System.out.print("Nhap so tien: ");
                            amount = Double.parseDouble(sc.nextLine());
                            check = false;

                        }catch(Exception e){
                            System.out.println("Loi nhap du lieu, " + e.getMessage());                            
                        }
                    }
                    try{
                        acc.deposit(amount);
                    }catch(IllegalArgumentException e){
                        System.out.println("Xay ra loi: " + e.getMessage());
                    }
                    sc.nextLine();
                    break;
            }
        }                 
    }
}  
 

