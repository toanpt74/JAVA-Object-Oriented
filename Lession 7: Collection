/*
Chương trình sử dụng các đối tượng trong collection quản lý đơn hàng
Các chức năng
1. Thêm đơn hàng mới: các đơn hàng gồm các trường thông tin
+ mã đơn hàng
+ Tên khách hàng
+ Danh sách sản phẩm
+ Số lượng
+ Tổng đơn giá
2. Cập nhật trạng thái đơn hàng: Đang xử lý, Đang giao hàng, hoàn tất
3. Xem danh sách đơn hàng
4. Tìm kiếm đơn hàng
5. Tính tổng doanh thu dựa trên các đơn hàng

Sử dụng các lớp đối tượng sau
+ ArrayList quản lý danh sách các đơn hàng
+ HashMap: quản lý thông tin sản phẩm trong mỗi đơn hàng
+ Comparator sắp xếp danh sách đơn hàng theo các tiêu chí

*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.lang.Comparable;
import java.util.Comparator;
import java.util.Collections;
class product implements Comparable<product>{
    private String productName;
    private double price;
    private int quantity;
    public product(){}
    public product(String productName, double price, int quantity)
    {
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }
    public double getPrice(){return price;}

    public void show(){
        System.out.println("Product Name: " + productName + ", Price: " + price + ", Quantity: " + quantity);
    }
    public int compareTo(product p){
        if(this.price == p.getPrice()) return 0;
        else if(this.price > p.getPrice()) return 1;
        else return -1;
    }
}

class order{
    private String orderId;
    private String customerName;
    private List<product> products;
    private String status;
    public order(){}
    
}
public class Main{
	public static void main(String[] args){	
        ArrayList<product> products = new ArrayList<product>();
        products.add(new product("Sua ong tho",5000, 1));
        products.add(new product("Banh gao",3000, 1));
        products.add(new product("Thit lon vai",55000, 1));
        
        for(int i=0; i<products.size(); i++)
        {
            product p = products.get(i);
            p.show();
        }
        Collections.sort(products);
        for(int i=0; i<products.size(); i++)
        {
            product p = products.get(i);
            p.show();
        }
    }
}   
======================================================================
/*
Chương trình sử dụng các đối tượng trong collection quản lý đơn hàng
Các chức năng
1. Thêm đơn hàng mới: các đơn hàng gồm các trường thông tin
+ mã đơn hàng
+ Tên khách hàng
+ Danh sách sản phẩm
+ Số lượng
+ Tổng đơn giá
2. Cập nhật trạng thái đơn hàng: Đang xử lý, Đang giao hàng, hoàn tất
3. Xem danh sách đơn hàng
4. Tìm kiếm đơn hàng
5. Tính tổng doanh thu dựa trên các đơn hàng

Sử dụng các lớp đối tượng sau
+ ArrayList quản lý danh sách các đơn hàng
+ HashMap: quản lý thông tin sản phẩm trong mỗi đơn hàng
+ Comparator sắp xếp danh sách đơn hàng theo các tiêu chí

*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.lang.Comparable;
import java.util.Comparator;
import java.util.Collections;
class product implements Comparable<product>{
    private String productName;
    private double price;
    private int quantity;
    public product(){}
    public product(String productName, double price, int quantity)
    {
        this.productName = productName;
        this.price = price;
        this.quantity = quantity;
    }
    public double getPrice(){return price;}
    public String getProductName(){return productName;}
    public void show(){
        System.out.println("Product Name: " + productName + ", Price: " + price + ", Quantity: " + quantity);
    }
    public void display(int stt){
        System.out.println(stt + " - Product Name: " + productName + ", Price: " + price );
    }
    public int compareTo(product p){
        if(this.price == p.getPrice()) return 0;
        else if(this.price > p.getPrice()) return 1;
        else return -1;
    }
}

class order{
    private String orderId;
    private String customerName;
    private ArrayList<product> products = new ArrayList<product>();
    private String status;
    public order(){

    }
    public order(String orderId, String customerName, String status){
        this.orderId = orderId;
        this.customerName = customerName;
        this.status = status;
    }
    public void show(){
        System.out.println("Order ID: " + this.orderId);
        System.out.println("Customer Name: " + customerName);
        System.out.println("Status: " + status);
        System.out.println("Product List");
        for(int i=0; i<products.size(); i++)
        {
            product p = products.get(i);
            p.show();
        }
    }
    public int FindProduct(String productName){
        for(int i=0; i<products.size(); i++){
            if(productName.equals(products.get(i).getProductName())){
                return i;
            }
        }
        return -1;
    }
    public void addProduct(product p){
        String name = p.getProductName();
        if(FindProduct(name)>=0) {
            System.out.println("The product " + name + " is already exist in the order");
            return;
        }
        products.add(p);
    }
    public void removeProduct(String name){
        int p = FindProduct(name);
        if(p >=0){
            products.remove(p);
        }else{
            System.out.println("There is no product " + name + " in order");
            return;
        }
    }


}
public class Main{
	public static void main(String[] args){	
       int chon;
       ArrayList<order> orders = new ArrayList<order>();
       ArrayList<product> lstProducts = new ArrayList<product>();
        Scanner sc= new Scanner(System.in);

       String productName;
       double price;
       int quantity; 
       String orderId="";
       String customerName ="";
       String orderStatus ="";
       while(true){
            System.out.println("ORDER MANAGEMENT");
            System.out.println("1-Product management");
            System.out.println("2-Add order");
            System.out.println("3-Display order");
            System.out.println("4-Update order");
            System.out.println("5-Sort");
            System.out.println("0-Quit");
            System.out.print("Please choice (1-6), Enter 0 to quit:");
            chon = Integer.parseInt(sc.nextLine()); 
            if(chon ==0) break;
            switch(chon){
                case 1:
                    System.out.println("Please enter the information of product");
                    while(true){
                        System.out.print("Enter Product Name (Enter to exit):");
                        productName = sc.nextLine();
                        if(productName =="") break;
                        System.out.print("Enter price:");
                        price = Double.parseDouble(sc.nextLine());
                        System.out.print("Enter quantity: ");
                        quantity = Integer.parseInt(sc.nextLine());
                        product p = new product(productName, price, quantity);
                        lstProducts.add(p);
                        System.out.println("Enter to continue");
                        sc.nextLine();
                    }
                    break;
                case 2:
                    int stt;
                    System.out.print("Please enter the order Id:");
                    orderId = sc.nextLine();
                    System.out.print("Please enter customer name:"); 
                    customerName = sc.nextLine();
                    System.out.print("Please enter status: ");
                    orderStatus = sc.nextLine();    
                    order ord = new order(orderId, customerName, orderStatus);
                    System.out.println("Please choice the product to add your order");
                    while(true){
                        for(int i=0; i<lstProducts.size(); i++){
                            product p =lstProducts.get(i);
                            p.display((i+1));
                        }
                        System.out.print("Please enter the number from 1 to " + lstProducts.size() + ", enter 0 to exit:");
                        stt = Integer.parseInt(sc.nextLine());
                        if(stt == 0) break;
                        product p1 = lstProducts.get(stt-1);
                        ord.addProduct(p1);
                    }
                    orders.add(ord);
                    break;                    
            }
       }
    }
}   
==================================================================
Generic
------------------------------------------------------------------------
/*
Chương trình sử dụng các đối tượng trong collection quản lý đơn hàng
Các chức năng
1. Thêm đơn hàng mới: các đơn hàng gồm các trường thông tin
+ mã đơn hàng
+ Tên khách hàng
+ Danh sách sản phẩm
+ Số lượng
+ Tổng đơn giá
2. Cập nhật trạng thái đơn hàng: Đang xử lý, Đang giao hàng, hoàn tất
3. Xem danh sách đơn hàng
4. Tìm kiếm đơn hàng
5. Tính tổng doanh thu dựa trên các đơn hàng

Sử dụng các lớp đối tượng sau
+ ArrayList quản lý danh sách các đơn hàng
+ HashMap: quản lý thông tin sản phẩm trong mỗi đơn hàng
+ Comparator sắp xếp danh sách đơn hàng theo các tiêu chí

*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.lang.Comparable;
import java.util.Comparator;
import java.util.Collections;
import java.util.Vector;
import java.util.Arrays;

class Box<T>{
    private T width;
    private T height;
    public Box(T width, T height){
        this.width = width;
        this.height = height;
    }
    public void show(){
        System.out.println("Box w = " + width + ", h = " + height);
    }
} 

class GenericArray<T>{
    public static <T> T get(int i, T[]arr){
        return arr[i];
    }
    public static<T> void output(T[]arr){
        for(T x:arr)
            System.out.print(x + ", ");
        System.out.println();
    }
    public static <T> void sort(T[] arr){
        Arrays.sort(arr);
    }
}

public class Main{
	public static void main(String[] args){	
        Integer a[]={4, 6, 12, 8, 19, 32, 1};
        GenericArray obj = new GenericArray();
        obj.output(a);
        System.out.println("Get an element from array");
        Integer x = obj.get(1, a);
        System.out.println(x);

        Double d[] ={1.1, 3.3, 2.2, 4.4};
        obj.output(d);
        GenericArray <Double> g = new GenericArray();
        g.output(d);


    }
} 
========================================================
/*
Chương trình mình họa việc sử dụng generic cho bài toán quản lý giao dịch ngân hàng
Chúng ta sẽ sử dụng generic để quả lý các lớp khách hàng khác nhau như: khách hàng cá nhân, khác hàng doanh nghiệp,..
1. Xây dựng lớp TransactionManager<T> để quản lý các giao dịch
	+ Thuộc tính transactions để lưu trữ một danh sách các giao dịch
	+ Phương thức: 
		- addTransaction: thêm một giao dịch
		- show: hiển thị thông tin các giao dịch
2. Lớp Transaction: quản lý giao dịch cá nhân
	+ Thuộc tính: accountNumber, amount
	+ Phương thức: toString()
3. Lớp BussinessTransaction: quản lý các giao dịch doanh nghiệp
		+ Thuộc tính: bussinessName, accountNumber, amount
		+ Phương thức: toString()
*/
import java.util.ArrayList;
import java.util.List;

class TransactionManager<T>{
	private List<T> transactions = new ArrayList<>();
	public void addTransaction(T transaction){
		transactions.add(transaction);
	}
	public void show(){
		for(T t:transactions){
			System.out.println(t);
		}
	}
}
class Transaction{
	private String accountNumber;
	private double amount;
	public Transaction(String accountNumber, double amount){
		this.accountNumber = accountNumber;
		this.amount = amount;
	};
	public String toString(){
		return "Account Number: " + accountNumber +", Amount: " + amount;
	}
}
class BussinessTransaction extends Transaction{
	private String bussinessName;
	public BussinessTransaction(String accountNumber, double amount, String bussinessName){
		super(accountNumber, amount);
		this.bussinessName = bussinessName;
	}
	public String toString(){
		return super.toString() + ", Bussiness Name: " + bussinessName;
	}
}
public class Main{
	public static void main(String[] args){
		 //Quản lý các giao dịch cá nhân
		 TransactionManager<Transaction> personalTransactions = new TransactionManager<>();
		 personalTransactions.addTransaction(new Transaction("11221", 5000));
		 personalTransactions.addTransaction(new Transaction("11231", 10000));
		 System.out.println("Personal Transaction");
		 personalTransactions.show();
		 TransactionManager<BussinessTransaction> bussinessTransactions = new TransactionManager<>();
		 bussinessTransactions.addTransaction(new BussinessTransaction("99221", 100000000, "ACB"));
		 bussinessTransactions.addTransaction(new BussinessTransaction("98341", 800000000, "Viettin"));
		 System.out.println("Bussiness Transaction");
		 bussinessTransactions.show();
	}
}


